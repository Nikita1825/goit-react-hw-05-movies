{"version":3,"file":"static/js/650.6d01a940.chunk.js","mappings":"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","sources":["components/Api/api.jsx","webpack://react-homework-template/./src/components/MoviesList/MovieList.module.css?dfe6","components/MoviesList/MoviesList.jsx","components/Searchbar/Searchbar.jsx","pages/Movies/Movies.jsx"],"sourcesContent":["import axios from 'axios';\nexport const getTrendsMovies = async() => {\n    const url = \"https://api.themoviedb.org/3/trending/movie/day?api_key=183c3cacc9c38c09c14d38798ccfe9d7\"\n      try {\n    const { data } = await axios.get(url);\n    return  data;\n  } catch (error) {\n    console.log(error);\n    \n  }\n}\nexport const getMovieDetails = async (movieId) => {\n  const url =\n    `https://api.themoviedb.org/3/movie/${movieId}?api_key=183c3cacc9c38c09c14d38798ccfe9d7`;\n  try {\n    const { data } = await axios.get(url);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getSearchMovies = async (query) => {\n  const url = `https://api.themoviedb.org/3/search/movie?api_key=183c3cacc9c38c09c14d38798ccfe9d7&query=${query}`;\n  try {\n    const { data } = await axios.get(url);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getMovieCredits = async (movieId) => {\n  const url = `https://api.themoviedb.org/3/movie/${movieId}/credits?api_key=183c3cacc9c38c09c14d38798ccfe9d7`;\n  try {\n    const { data } = await axios.get(url);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getMovieReviews = async movieId => {\n  const url = `https://api.themoviedb.org/3/movie/${movieId}/reviews?api_key=183c3cacc9c38c09c14d38798ccfe9d7`;\n  try {\n    const { data } = await axios.get(url);\n    return data;\n  } catch (error) {\n    console.log(error);\n  }\n};","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"MovieList_list__MPHyX\"};","import { useLocation, Link } from \"react-router-dom\";\nimport css from \"./MovieList.module.css\"\nimport PropTypes from 'prop-types';\n\n\nexport const MoviesList = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <>\n      <ul className={css.list}>\n        {movies.map(movie => {\n          return (\n            <li key={movie.id}>\n              <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n                {movie.title ?? movie.name}\n              </Link>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\nMoviesList.propTypes = {\n  movies: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number.isRequired,\n      title: PropTypes.string,\n      name: PropTypes.string,\n    })\n  ).isRequired,\n};\n","import { useState } from \"react\"\nimport PropTypes from 'prop-types';\n\nexport const Searchbar = ({ onSubmit }) => {\n    const [searchQuery, setSearchQuery] = useState('')\n     const handleSubmit = event => {\n       event.preventDefault();\n       if (searchQuery) {\n         onSubmit(searchQuery);\n         resetForm();\n       }\n    };\n    \n  const resetForm = () => {\n    setSearchQuery('');\n    };\n    const handleInputChange = event => {\n      setSearchQuery(event.target.value.trim().toLowerCase());\n    };\n\n    return (\n      <form onSubmit={handleSubmit}>\n        <input\n          type=\"text\"\n          autoComplete=\"off\"\n          autoFocus\n          placeholder=\"Search images and photos\"\n          value={searchQuery}\n          onChange={handleInputChange}\n        />\n      </form>\n    );\n}\nSearchbar.propTypes = {\n  onSubmit: PropTypes.func.isRequired,\n};","import { MoviesList } from \"components/MoviesList/MoviesList\";\nimport { Searchbar } from \"components/Searchbar/Searchbar\"\nimport { useState, useEffect } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { Notify } from 'notiflix/build/notiflix-notify-aio';\nimport { getSearchMovies } from \"components/Api/api\";\n\n\nconst Movies = () => {\n      const [movies, setMovies] = useState([]);\n      const [isLoading, setIsLoading] = useState(false);\n      const [error, setError] = useState(false);\n    const [searchParams, setSearchParams] = useSearchParams();\n\n      const handleSubmit = query => {\n        if (!query) {\n          return Notify.failure('Please, write something');\n        }\n        setSearchParams({ query: query.trim() });\n    };\n    \n     useEffect(() => {\n       const getImagesFromAPI = async query => {\n         try {\n           setIsLoading(true);\n           const data = await getSearchMovies(query);\n           if (data.results.length === 0) {\n             return Notify.failure('There is no movies with this title');\n           }\n           setMovies(data.results);\n         } catch (error) {\n           setError(true);\n           console.error(error);\n         } finally {\n           setIsLoading(false);\n         }\n       };\n\n       const searchValue = searchParams.get('query');\n       if (searchValue) {\n         getImagesFromAPI(searchValue);\n       }\n     }, [searchParams]);\n         \n    \n    \n        \n    return (\n      <div>\n        {isLoading}\n        <Searchbar onSubmit={handleSubmit} />\n        {movies.length > 0 && <MoviesList movies={movies} />}\n        {error && Notify.failure(`${error}`)}\n      </div>\n    );\n}\nexport default Movies"],"names":["getTrendsMovies","axios","data","console","log","getMovieDetails","movieId","url","getSearchMovies","query","getMovieCredits","getMovieReviews","MoviesList","movies","location","useLocation","className","css","map","movie","to","id","state","from","title","name","Searchbar","onSubmit","useState","searchQuery","setSearchQuery","resetForm","event","preventDefault","type","autoComplete","autoFocus","placeholder","value","onChange","target","trim","toLowerCase","setMovies","isLoading","setIsLoading","error","setError","useSearchParams","searchParams","setSearchParams","useEffect","getImagesFromAPI","results","length","Notify","searchValue","get"],"sourceRoot":""}